name: CI + Create Release

on:
  push:
    branches: [ "release" ]
  pull_request:
    branches: [ "release" ]

jobs:
  build_windows:
    name: Build Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: flutter-actions/setup-flutter@v4
        with:
          channel: stable
          version: 3.35.7

      - name: Install dependencies
        run: flutter pub get

      - name: Build Windows package
        run: flutter build windows

      - name: Zip Windows build for release
        # Compress the entire Release folder into a single zip for attaching to the GitHub Release.
        run: |
          Compress-Archive -Path (Get-ChildItem -Path 'build/windows/x64/runner/Release' -Recurse | ForEach-Object FullName) -DestinationPath 'windows-build.zip' -Force
        shell: powershell

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: windows-build.zip

  build_android:
    name: Build Android
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Flutter
        uses: flutter-actions/setup-flutter@v4
        with:
          channel: stable
          version: 3.35.7

      - name: Decode Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > android/app/keystore.jks
          
      - name: Create Signing Properties File
        working-directory: android
        run: |
          echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" > key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> key.properties
          echo "storeFile=keystore.jks" >> key.properties

      - name: Build Android APK
        working-directory: android
        run: |
            flutter build apk --release
            cd ../build/app/outputs/flutter-apk
            mv app-release.apk recon-build.apk

      - name: Upload Android artifact
        uses: actions/upload-artifact@v4
        with:
          name: recon-build
          path: build/app/outputs/flutter-apk/recon-build.apk

  release:
    name: Create Release and attach artifacts
    runs-on: ubuntu-latest
    needs: [build_windows, build_android]
    steps:
      - name: Checkout (for commit metadata if you want)
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          # downloads all artifacts into the current workspace (they retain the uploaded file names)
          path: release_artifacts

      - name: Get Flutter Project Version
        id: get_version
        run: |
          VERSION=$(grep '^version: ' pubspec.yaml | sed 's/version: //')
          echo "Project version: $VERSION"
          echo "::set-output name=version::$VERSION"

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          # for release_name you can use the commit message, branch, or a template
          release_name: ReCon ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Windows Build to Release
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: release_artifacts/windows-build/windows-build.zip
          asset_name: ReConRunner-Windows-${{ steps.get_version.outputs.version }}.zip
          asset_content_type: application/zip
      
      - name: Upload Android APK to Release
        id: upload-release-asset-android
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release_artifacts/recon-build/recon-build.apk
          asset_name: ReConRunner-Android-${{ steps.get_version.outputs.version }}.apk
          asset_content_type: application/vnd.android.package-archive